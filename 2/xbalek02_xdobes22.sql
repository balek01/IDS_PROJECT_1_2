--Author: Miroslav Bálek xbalek02--
--Author: Kristian Dobeš xdobes22--

----DROP TABLES----
DROP TABLE COVERS;
DROP TABLE INSTOCK;
DROP TABLE ISRESERVED;
DROP TABLE RESERVATION;
DROP TABLE MEDICINE;
DROP TABLE INSURANCE;
DROP TABLE SHOP;
DROP TABLE EMPLOYEE;
DROP TABLE CUSTOMER;
DROP TABLE PERSON;

----CREATE TABLES----
CREATE TABLE MEDICINE(
    MEDICINE_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    MEDICINE_NAME CHAR(255) NOT NULL,
    PRICE DECIMAL(10, 2),
    PERSCTIPTION_NEEDED NUMBER(1, 0) DEFAULT 0 NOT NULL
);

ALTER TABLE MEDICINE ADD CONSTRAINT PERSCTIPTION_NEEDED_RANGE CHECK (PERSCTIPTION_NEEDED IN (0, 1));

CREATE TABLE INSURANCE(
    INSURANCE_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    INSURANCE_NAME CHAR(255) NOT NULL,
    ADDRESS CHAR(255) NOT NULL
);

CREATE TABLE COVERS(
    INSURANCE_ID INTEGER NOT NULL,
    MEDICINE_ID INTEGER NOT NULL,
    COST_COVERAGE DECIMAL(10, 2),
    PRIMARY KEY (INSURANCE_ID, MEDICINE_ID),
    FOREIGN KEY (INSURANCE_ID) REFERENCES INSURANCE ON DELETE CASCADE,
    FOREIGN KEY (MEDICINE_ID) REFERENCES MEDICINE ON DELETE CASCADE
);

CREATE TABLE SHOP(
    SHOP_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    ADDRESS CHAR(255) NOT NULL
);

CREATE TABLE INSTOCK(
    SHOP_ID INTEGER NOT NULL,
    MEDICINE_ID INTEGER NOT NULL,
    AMOUNT INT NOT NULL,
    PRIMARY KEY (SHOP_ID, MEDICINE_ID),
    FOREIGN KEY (SHOP_ID) REFERENCES SHOP ON DELETE CASCADE,
    FOREIGN KEY (MEDICINE_ID) REFERENCES MEDICINE ON DELETE CASCADE
);

ALTER TABLE INSTOCK ADD CONSTRAINT AMOUNT_NOT_NEGATIVE CHECK (AMOUNT > 0);


--table for supertype person + for subtypes customer employee with primary key of supertype
--I chose this option because it seems closest to the concept of inheritance

CREATE TABLE PERSON(
    PERSON_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    ADDRESS CHAR(255) NOT NULL,
    EMAIL CHAR(255) NOT NULL
);

CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    DATE_OF_REGISTRATION TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL,
    BONUS_POINTS INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES PERSON ON DELETE CASCADE
);

ALTER TABLE CUSTOMER ADD CONSTRAINT BONUS_POINTS_NOT_NEGATIVE CHECK (BONUS_POINTS > 0);

CREATE TABLE EMPLOYEE (
    CUSTOMER_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    SALARY DECIMAL(10, 2),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES PERSON ON DELETE CASCADE
);

-- i dont know why but inserted emails trigger error, regex seems to be correct
-- ORA-02290: check constraint (XBALEK02.PERSON_EMAIL_FORMAT) violated
--ALTER TABLE PERSON ADD CONSTRAINT PERSON_EMAIL_FORMAT CHECK (REGEXP_LIKE(EMAIL, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'));

CREATE TABLE RESERVATION(
    RESERVATION_ID INT GENERATED AS IDENTITY PRIMARY KEY,
    PERSON_ID INTEGER NOT NULL,
    ORDER_DATE TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL,
    ORDER_READY_DATE TIMESTAMP DEFAULT LOCALTIMESTAMP,
    FOREIGN KEY (PERSON_ID) REFERENCES PERSON ON DELETE CASCADE
);

ALTER TABLE RESERVATION ADD CONSTRAINT ORDER_DATE_BEFORE_READY_DATE CHECK (ORDER_DATE <= ORDER_READY_DATE);

CREATE OR REPLACE TRIGGER RESERVATION_ORDER_DATE_TRIGGER BEFORE
    INSERT OR UPDATE ON RESERVATION FOR EACH ROW
BEGIN
    IF :NEW.ORDER_DATE > CURRENT_TIMESTAMP THEN
        RAISE_APPLICATION_ERROR(-20001, 'Order date cannot be future date.');
    END IF;
END;
/

CREATE TABLE ISRESERVED(
    RESERVATION_ID INTEGER NOT NULL,
    MEDICINE_ID INTEGER NOT NULL,
    PRIMARY KEY (RESERVATION_ID, MEDICINE_ID),
    FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATION ON DELETE CASCADE,
    FOREIGN KEY (MEDICINE_ID) REFERENCES MEDICINE ON DELETE CASCADE
);


ALTER TABLE EMPLOYEE ADD CONSTRAINT SALARY_NOT_NEGATIVE CHECK (SALARY > 0);

----INSERT TABLES----
INSERT INTO MEDICINE (
    MEDICINE_NAME,
    PRICE,
    PERSCTIPTION_NEEDED
) VALUES (
    'Medicine1',
    10.50,
    1
);

INSERT INTO MEDICINE (
    MEDICINE_NAME,
    PRICE,
    PERSCTIPTION_NEEDED
) VALUES (
    'Medicine2',
    5.99,
    0
);

INSERT INTO MEDICINE (
    MEDICINE_NAME,
    PRICE,
    PERSCTIPTION_NEEDED
) VALUES (
    'Medicine3',
    8.75,
    1
);

INSERT INTO INSURANCE (
    INSURANCE_NAME,
    ADDRESS
) VALUES (
    'Insurance1',
    '123 Main St'
);

INSERT INTO INSURANCE (
    INSURANCE_NAME,
    ADDRESS
) VALUES (
    'Insurance2',
    '456 Second St'
);

INSERT INTO COVERS (
    INSURANCE_ID,
    MEDICINE_ID,
    COST_COVERAGE
) VALUES (
    1,
    1,
    8.00
);

INSERT INTO COVERS (
    INSURANCE_ID,
    MEDICINE_ID,
    COST_COVERAGE
) VALUES (
    1,
    3,
    26.09
);

INSERT INTO COVERS (
    INSURANCE_ID,
    MEDICINE_ID,
    COST_COVERAGE
) VALUES (
    2,
    2,
    4333.50
);

INSERT INTO SHOP (
    ADDRESS
) VALUES (
    '789 Super St'
);

INSERT INTO SHOP (
    ADDRESS
) VALUES (
    '321 NotSuper Ave'
);

INSERT INTO INSTOCK (
    SHOP_ID,
    MEDICINE_ID,
    AMOUNT
) VALUES (
    1,
    1,
    20
);

INSERT INTO INSTOCK (
    SHOP_ID,
    MEDICINE_ID,
    AMOUNT
) VALUES (
    1,
    2,
    15
);

INSERT INTO INSTOCK (
    SHOP_ID,
    MEDICINE_ID,
    AMOUNT
) VALUES (
    2,
    1,
    10
);

INSERT INTO PERSON (
    ADDRESS,
    EMAIL
) VALUES (
    '111 First St',
    'person1@example.com'
);

INSERT INTO PERSON (
    ADDRESS,
    EMAIL
) VALUES (
    '222 Second St',
    'person2@example.com'
);

INSERT INTO RESERVATION (
    PERSON_ID,
    ORDER_READY_DATE
) VALUES (
    1,
    TO_TIMESTAMP('2023-04-01', 'YYYY-MM-DD')
);

INSERT INTO RESERVATION (
    PERSON_ID
) VALUES (
    1
);

INSERT INTO ISRESERVED (
    RESERVATION_ID,
    MEDICINE_ID
) VALUES (
    1,
    1
);

INSERT INTO ISRESERVED (
    RESERVATION_ID,
    MEDICINE_ID
) VALUES (
    1,
    3
);

INSERT INTO ISRESERVED (
    RESERVATION_ID,
    MEDICINE_ID
) VALUES (
    2,
    2
);

INSERT INTO CUSTOMER (
    BONUS_POINTS
) VALUES (
    100
);

INSERT INTO CUSTOMER (
    BONUS_POINTS
) VALUES (
    50
);

INSERT INTO EMPLOYEE (
    SALARY
) VALUES (
    3000.00
);

INSERT INTO EMPLOYEE (
    SALARY
) VALUES (
    2500.00
);